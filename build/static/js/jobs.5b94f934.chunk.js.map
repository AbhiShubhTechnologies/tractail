{"version":3,"file":"static/js/jobs.5b94f934.chunk.js","mappings":"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","sources":["components/jobs.js"],"sourcesContent":["import { React,useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport Pagination from \"react-js-pagination\";\n\nlet Jobs = ()=>{\n    let [rows, setRows]=useState([]);\n    let [page, setPage] = useState(0);\n    let [rowsPerPage, setRowsPerPage] = useState(15);\n    let [total, setTotal] = useState(0);\n    const [isLoading, setIsLoading] = useState(false);\n    const [searchString, setSearchString] = useState('');\n    const [account, setAccount] = useState( '');\n    let [accounts, setAccounts]=useState([]);\n\n\n    function Loading( placeholders ) {\n        placeholders = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\n        return (<>\n            {placeholders.map( (i) => (\n                <p className=\"placeholder-wave mb-0\" key={i}>\n                    <span className=\"placeholder col-12 bg-secondary\"></span>\n                </p>\n            ))}\n        </>)\n    }\n\n    const jobs = async(pageNumber=0)=> {\n        setIsLoading(true);\n         await axios.get(process.env.REACT_APP_API_URL +'/jobs', {\n            params: {\n                page        : pageNumber,\n                limit       : rowsPerPage,\n                search      : searchString,\n                account     :  account\n\n            }\n        }).then(response => {\n            setIsLoading(false)\n            setRows(response.data.data);\n            setPage(response.data.page)\n            setTotal(response.data.total)\n        }).catch(err => {\n            console.log(err);\n        });\n    };\n\n    const template = async()=> {\n        await axios.get(process.env.REACT_APP_API_URL +'/admin/settings')\n        .then(response => {\n           setAccounts(response.data.accounts);\n       }).catch(err => {\n           console.log(err);\n       });\n   };\n\n    useEffect(() => {\n        jobs();\n        template()\n    }, [account]);\n\n    const searchJob = (text) => {\n        setSearchString(text);\n        if (text.length === 0) {\n            clearSearch();\n            jobs();\n        }\n        if (text.length <= 2) {\n            return;\n        }\n        jobs(); \n    }\n\n    function clearSearch() {\n        setRows([]);\n        setSearchString('');\n        document.getElementById('searchString').value = '';\n    }\n\n    const handleChange = event => {\n        setAccount(event.target.value);\n        jobs();\n    };\n\n    const removeJob = async(row)=> {\n        await axios.post(process.env.REACT_APP_API_URL +'/job/update', row )\n        .then(response => {\n            alert(response.data.message);\n            window.location.reload(false);\n       }).catch(err => {\n           console.log(err);\n       });\n   };\n    \n    return(\n        <div className=\"row\">\n            <div className=\"row\">\n                <div className=\"col-md-11 mx-auto\">\n                    <div className=\"row align-items-center mt-2\">\n                        <div className=\"col-md-2 mb-3\">\n                            <h2 className=\"text-primary mb-0\">Jobs</h2>\n                        </div>\n                        <div className=\"col-md-6 mb-3 mx-auto\">\n                            <input type=\"search\" name=\"search\" id=\"searchString\" className=\"form-control\" placeholder=\"Search by batch...\" maxLength=\"100\" onChange={(e) => searchJob(e.target.value)} autoComplete=\"off\" />\n                        </div>\n                        <div className=\"col-md-2 col-lg-1 mb-3 ms-auto\">\n                            <select className='form-select' value={account}  onChange={handleChange}>\n                                <option value={''}>All</option>\n                                {accounts.map(row=>{\n                                    return(\n                                        <option value={row.metaId} key={row.meta_key}>{row.meta_key}</option>\n                                    )\n                                })}\n                            </select>\n                        </div>\n                        <div className=\"col-md-2 col-lg-auto mb-3\">\n                            <Link className=\"btn btn-primary\" to=\"/admin/add/job\">Add Job</Link>\n                        </div>\n                    </div>\n                    <div className=\"table-responsive mb-3\">\n                        <table className=\"table table-hover table-sm table-striped mb-0\">\n                            <thead className=\"thead-dark\">\n                                <tr className='table-dark'>\n                                    <th scope=\"col\">Job</th>\n                                    <th scope=\"col\">Account ID</th>\n                                    <th scope=\"col\">Batch</th>\n                                    <th scope='col'>Total</th>\n                                    <th scope='col'>Scanned</th>\n                                    <th scope='col'>Pending</th>\n                                    <th scope=\"col\">Created On</th>\n                                    <th scope=\"col\" className=\"text-end\">Action</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                            {rows.map(row=>{\n                                return(\n                                    <tr key={row.jobId}>\n                                        <td><Link to={`/admin/job/${row.jobId}`}>#{row.jobId || '1'}</Link></td>\n                                        <td>{row.accountId }</td>\n                                        <td>{row.batch }</td>\n                                        <td>{row.total }</td>\n                                        <td>{row.scanned }</td>\n                                        <td>{row.pending }</td>\n                                        <td>{new Date(row.updated).toLocaleDateString()}</td>\n                                        <td className=\"text-end\">\n                                            <button className=\"btn btn-sm border-0 btn-outline-danger\" onClick={() => { if (window.confirm('Are you sure you want to delete this Job?')) {removeJob(row) } } } >\n                                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-trash\" viewBox=\"0 0 16 16\">\n                                                    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n                                                    <path fillRule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n                                                </svg>\n                                            </button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                            \n                            </tbody>\n                        </table>\n                    </div>\n                    <Pagination \n                        activePage={page}\n                        totalItemsCount={total}\n                        itemsCountPerPage={rowsPerPage}\n                        onChange={(pageNumber)=>jobs(pageNumber)}\n                        innerClass=\"pagination justify-content-center small mb-0\"\n                        itemClass=\"page-item\"\n                        linkClass=\"page-link\"\n                        activeLinkClass=\"active\"\n                        firstPageText=\"First\"\n                        lastPageText=\"Last\"\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\nexport default Jobs;"],"names":["useState","rows","setRows","page","setPage","rowsPerPage","total","setTotal","setIsLoading","searchString","setSearchString","account","setAccount","accounts","setAccounts","jobs","pageNumber","axios","process","params","limit","search","then","response","data","catch","err","console","log","template","useEffect","searchJob","text","length","document","getElementById","value","removeJob","row","alert","message","window","location","reload","className","type","name","id","placeholder","maxLength","onChange","e","target","autoComplete","event","map","metaId","meta_key","to","scope","jobId","accountId","batch","scanned","pending","Date","updated","toLocaleDateString","onClick","confirm","xmlns","width","height","fill","viewBox","d","fillRule","activePage","totalItemsCount","itemsCountPerPage","innerClass","itemClass","linkClass","activeLinkClass","firstPageText","lastPageText"],"sourceRoot":""}