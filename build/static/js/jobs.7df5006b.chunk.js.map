{"version":3,"file":"static/js/jobs.7df5006b.chunk.js","mappings":"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","sources":["components/jobs.js"],"sourcesContent":["import { React,useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Pagination from 'react-js-pagination';\nimport axios from 'axios';\n\nlet Jobs = ()=>{\n    const [rows, setRows]=useState([]);\n    const [page, setPage] = useState(0);\n    const rowsPerPage = 15;\n    // const [rowsPerPage, setRowsPerPage] = useState(15);\n    const [total, setTotal] = useState(0);\n    const [isLoading, setIsLoading] = useState(false);\n    const [searchString, setSearchString] = useState('');\n    const [account, setAccount] = useState( '');\n    const [accounts, setAccounts] = useState([]);\n\n    const jobs = async(pageNumber=0)=> {\n        setIsLoading(true);\n         await axios.get(process.env.REACT_APP_API_URL +'/jobs', {\n            params: {\n                page        : pageNumber,\n                limit       : rowsPerPage,\n                search      : searchString,\n                account     :  account\n\n            }\n        }).then(response => {\n            setIsLoading(false)\n            setRows(response.data.data);\n            setPage(response.data.page)\n            setTotal(response.data.total)\n        }).catch(err => {\n            console.log(err);\n        });\n    };\n\n    const template = async()=> {\n        await axios.get(process.env.REACT_APP_API_URL +'/admin/settings')\n        .then(response => {\n           setAccounts(response.data.accounts);\n       }).catch(err => {\n           console.log(err);\n       });\n   };\n\n    useEffect(() => {\n        jobs();\n        template();\n    }, [account]);\n\n    const searchJob = (text) => {\n        setSearchString(text);\n        if (text.length === 0) {\n            clearSearch();\n            jobs();\n        }\n        if (text.length <= 2) {\n            return;\n        }\n        jobs(); \n    }\n\n    function clearSearch() {\n        setRows([]);\n        setSearchString('');\n        document.getElementById('searchString').value = '';\n    }\n\n    const handleChange = event => {\n        setAccount(event.target.value);\n        jobs();\n    };\n\n    const removeJob = async(row)=> {\n        await axios.post(process.env.REACT_APP_API_URL +'/job/update', row )\n        .then(response => {\n            alert(response.data.message);\n            window.location.reload(false);\n       }).catch(err => {\n           console.log(err);\n       });\n   };\n\n   const refresh = async() => {\n        await axios.get(process.env.REACT_APP_API_URL +'/admin/statistics/recalculate' )\n        .then(response => {\n            alert('Statistics have been updated');\n            window.location.reload(false);\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    function Loading( placeholders ) {\n        placeholders = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\n        return (<>\n            {placeholders.map( (i) => (\n                <p className=\"placeholder-wave mb-0\" key={i}>\n                    <span className=\"placeholder col-12 bg-secondary\"></span>\n                </p>\n            ))}\n        </>)\n    }\n    \n    return(\n        <div className=\"container-lg\">\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"row align-items-center mt-2\">\n                        <div className=\"col-md-2 mb-3\">\n                            <h2 className=\"text-primary mb-0\">Jobs</h2>\n                        </div>\n                        <div className=\"col-md-4 mb-3 mx-auto\">\n                            <input type=\"search\" name=\"search\" id=\"searchString\" className=\"form-control\" placeholder=\"Search by batch...\" maxLength=\"100\" onChange={(e) => searchJob(e.target.value)} autoComplete=\"off\" />\n                        </div>\n                        <div className=\"col-md-2 col-lg-1 mb-3 ms-auto\">\n                            <select className='form-select' value={account}  onChange={handleChange}>\n                                <option value={''}>All</option>\n                                {accounts.map(row=>{\n                                    return(\n                                        <option value={row.metaId} key={row.meta_key}>{row.meta_key}</option>\n                                    )\n                                })}\n                            </select>\n                        </div>\n                        <div className=\"col-md-1 col-lg-auto mb-3\">\n                            <button  className=\"btn btn-outline-secondary\" onClick={ refresh }>\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-arrow-clockwise\" viewBox=\"0 0 16 16\">\n                                    <path fillRule=\"evenodd\" d=\"M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z\"/>\n                                    <path d=\"M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z\"/>\n                                </svg>\n                            </button>\n                        </div>\n                        <div className=\"col-md-2 col-lg-auto mb-3\">\n                            <Link className=\"btn btn-primary\" to=\"/admin/add/job\">Add Job</Link>\n                        </div>\n                    </div>\n                    { isLoading ?\n                        <Loading rows=\"20\" />\n                    :\n                    <div className=\"table-responsive mb-3\">\n                        <table className=\"table table-hover table-sm table-striped mb-0\">\n                            <thead className=\"thead-dark\">\n                                <tr className='table-dark'>\n                                    <th scope=\"col\">Job</th>\n                                    <th scope=\"col\">Account ID</th>\n                                    <th scope=\"col\">Batch</th>\n                                    <th scope='col'>Total</th>\n                                    <th scope='col'>Scanned</th>\n                                    <th scope='col'>Error</th>\n                                    <th scope='col'>Pending</th>\n                                    <th scope=\"col\">Created On</th>\n                                    <th scope=\"col\" className=\"text-end\">Action</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                            {rows.map(row=>{\n                                return(\n                                    <tr key={row.jobId}>\n                                        <td><Link to={`/admin/job/${row.jobId}`}>#{row.jobId || '1'}</Link></td>\n                                        <td>{row.accountId }</td>\n                                        <td>{row.batch }</td>\n                                        <td>{row.total }</td>\n                                        <td>{row.scanned }</td>\n                                        <td>{row.error }</td>\n                                        <td>{row.pending }</td>\n                                        <td>{new Date(row.updated).toLocaleDateString()}</td>\n                                        <td className=\"text-end\">\n                                            <button className=\"btn btn-sm border-0 btn-outline-danger\" onClick={() => { if (window.confirm('Are you sure you want to delete this Job?')) {removeJob(row) } } } >\n                                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-trash\" viewBox=\"0 0 16 16\">\n                                                    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n                                                    <path fillRule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n                                                </svg>\n                                            </button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                            \n                            </tbody>\n                        </table>\n                    </div>\n                    }\n                    <Pagination \n                        activePage={page}\n                        totalItemsCount={total}\n                        itemsCountPerPage={rowsPerPage}\n                        onChange={(pageNumber)=>jobs(pageNumber)}\n                        innerClass=\"pagination justify-content-center small mb-0\"\n                        itemClass=\"page-item\"\n                        linkClass=\"page-link\"\n                        activeLinkClass=\"active\"\n                        firstPageText=\"First\"\n                        lastPageText=\"Last\"\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\nexport default Jobs;"],"names":["_useState","useState","_useState2","_slicedToArray","rows","setRows","_useState3","_useState4","page","setPage","_useState5","_useState6","total","setTotal","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","searchString","setSearchString","_useState11","_useState12","account","setAccount","_useState13","_useState14","accounts","setAccounts","jobs","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","pageNumber","_args","arguments","wrap","_context","prev","next","length","undefined","axios","get","process","params","limit","search","then","response","data","catch","err","console","log","stop","apply","template","_ref2","_callee2","_context2","useEffect","searchJob","text","document","getElementById","value","removeJob","_ref3","_callee3","row","_context3","post","alert","message","window","location","reload","_x","refresh","_ref4","_callee4","_context4","Loading","placeholders","_jsx","_Fragment","children","map","i","className","_jsxs","type","name","id","placeholder","maxLength","onChange","e","target","autoComplete","event","metaId","meta_key","onClick","xmlns","width","height","fill","viewBox","fillRule","d","Link","to","scope","concat","jobId","accountId","batch","scanned","error","pending","Date","updated","toLocaleDateString","confirm","Pagination","activePage","totalItemsCount","itemsCountPerPage","innerClass","itemClass","linkClass","activeLinkClass","firstPageText","lastPageText"],"sourceRoot":""}